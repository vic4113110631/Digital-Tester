// Architectire_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module Architectire_mm_interconnect_2 (
		input  wire        PCIExpress_pcie_core_clk_clk,                                //                              PCIExpress_pcie_core_clk.clk
		input  wire        PCIExpress_txs_translator_reset_reset_bridge_in_reset_reset, // PCIExpress_txs_translator_reset_reset_bridge_in_reset.reset
		input  wire        SGDMA_reset_reset_bridge_in_reset_reset,                     //                     SGDMA_reset_reset_bridge_in_reset.reset
		input  wire [31:0] SGDMA_descriptor_read_address,                               //                                 SGDMA_descriptor_read.address
		output wire        SGDMA_descriptor_read_waitrequest,                           //                                                      .waitrequest
		input  wire        SGDMA_descriptor_read_read,                                  //                                                      .read
		output wire [31:0] SGDMA_descriptor_read_readdata,                              //                                                      .readdata
		output wire        SGDMA_descriptor_read_readdatavalid,                         //                                                      .readdatavalid
		input  wire [31:0] SGDMA_descriptor_write_address,                              //                                SGDMA_descriptor_write.address
		output wire        SGDMA_descriptor_write_waitrequest,                          //                                                      .waitrequest
		input  wire        SGDMA_descriptor_write_write,                                //                                                      .write
		input  wire [31:0] SGDMA_descriptor_write_writedata,                            //                                                      .writedata
		input  wire [31:0] SGDMA_m_read_address,                                        //                                          SGDMA_m_read.address
		output wire        SGDMA_m_read_waitrequest,                                    //                                                      .waitrequest
		input  wire        SGDMA_m_read_read,                                           //                                                      .read
		output wire [31:0] SGDMA_m_read_readdata,                                       //                                                      .readdata
		output wire        SGDMA_m_read_readdatavalid,                                  //                                                      .readdatavalid
		output wire [30:0] PCIExpress_txs_address,                                      //                                        PCIExpress_txs.address
		output wire        PCIExpress_txs_write,                                        //                                                      .write
		output wire        PCIExpress_txs_read,                                         //                                                      .read
		input  wire [63:0] PCIExpress_txs_readdata,                                     //                                                      .readdata
		output wire [63:0] PCIExpress_txs_writedata,                                    //                                                      .writedata
		output wire [6:0]  PCIExpress_txs_burstcount,                                   //                                                      .burstcount
		output wire [7:0]  PCIExpress_txs_byteenable,                                   //                                                      .byteenable
		input  wire        PCIExpress_txs_readdatavalid,                                //                                                      .readdatavalid
		input  wire        PCIExpress_txs_waitrequest,                                  //                                                      .waitrequest
		output wire        PCIExpress_txs_chipselect                                    //                                                      .chipselect
	);

	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest;    // SGDMA_descriptor_read_agent:av_waitrequest -> SGDMA_descriptor_read_translator:uav_waitrequest
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_readdata;       // SGDMA_descriptor_read_agent:av_readdata -> SGDMA_descriptor_read_translator:uav_readdata
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess;    // SGDMA_descriptor_read_translator:uav_debugaccess -> SGDMA_descriptor_read_agent:av_debugaccess
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_address;        // SGDMA_descriptor_read_translator:uav_address -> SGDMA_descriptor_read_agent:av_address
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_read;           // SGDMA_descriptor_read_translator:uav_read -> SGDMA_descriptor_read_agent:av_read
	wire    [3:0] sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable;     // SGDMA_descriptor_read_translator:uav_byteenable -> SGDMA_descriptor_read_agent:av_byteenable
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid;  // SGDMA_descriptor_read_agent:av_readdatavalid -> SGDMA_descriptor_read_translator:uav_readdatavalid
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_lock;           // SGDMA_descriptor_read_translator:uav_lock -> SGDMA_descriptor_read_agent:av_lock
	wire          sgdma_descriptor_read_translator_avalon_universal_master_0_write;          // SGDMA_descriptor_read_translator:uav_write -> SGDMA_descriptor_read_agent:av_write
	wire   [31:0] sgdma_descriptor_read_translator_avalon_universal_master_0_writedata;      // SGDMA_descriptor_read_translator:uav_writedata -> SGDMA_descriptor_read_agent:av_writedata
	wire    [2:0] sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount;     // SGDMA_descriptor_read_translator:uav_burstcount -> SGDMA_descriptor_read_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> SGDMA_descriptor_read_agent:rp_valid
	wire  [110:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> SGDMA_descriptor_read_agent:rp_data
	wire          rsp_mux_src_ready;                                                         // SGDMA_descriptor_read_agent:rp_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> SGDMA_descriptor_read_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> SGDMA_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> SGDMA_descriptor_read_agent:rp_endofpacket
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest;   // SGDMA_descriptor_write_agent:av_waitrequest -> SGDMA_descriptor_write_translator:uav_waitrequest
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_readdata;      // SGDMA_descriptor_write_agent:av_readdata -> SGDMA_descriptor_write_translator:uav_readdata
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess;   // SGDMA_descriptor_write_translator:uav_debugaccess -> SGDMA_descriptor_write_agent:av_debugaccess
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_address;       // SGDMA_descriptor_write_translator:uav_address -> SGDMA_descriptor_write_agent:av_address
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_read;          // SGDMA_descriptor_write_translator:uav_read -> SGDMA_descriptor_write_agent:av_read
	wire    [3:0] sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable;    // SGDMA_descriptor_write_translator:uav_byteenable -> SGDMA_descriptor_write_agent:av_byteenable
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid; // SGDMA_descriptor_write_agent:av_readdatavalid -> SGDMA_descriptor_write_translator:uav_readdatavalid
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_lock;          // SGDMA_descriptor_write_translator:uav_lock -> SGDMA_descriptor_write_agent:av_lock
	wire          sgdma_descriptor_write_translator_avalon_universal_master_0_write;         // SGDMA_descriptor_write_translator:uav_write -> SGDMA_descriptor_write_agent:av_write
	wire   [31:0] sgdma_descriptor_write_translator_avalon_universal_master_0_writedata;     // SGDMA_descriptor_write_translator:uav_writedata -> SGDMA_descriptor_write_agent:av_writedata
	wire    [2:0] sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount;    // SGDMA_descriptor_write_translator:uav_burstcount -> SGDMA_descriptor_write_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> SGDMA_descriptor_write_agent:rp_valid
	wire  [110:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> SGDMA_descriptor_write_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                     // SGDMA_descriptor_write_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> SGDMA_descriptor_write_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> SGDMA_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> SGDMA_descriptor_write_agent:rp_endofpacket
	wire          sgdma_m_read_translator_avalon_universal_master_0_waitrequest;             // SGDMA_m_read_agent:av_waitrequest -> SGDMA_m_read_translator:uav_waitrequest
	wire   [31:0] sgdma_m_read_translator_avalon_universal_master_0_readdata;                // SGDMA_m_read_agent:av_readdata -> SGDMA_m_read_translator:uav_readdata
	wire          sgdma_m_read_translator_avalon_universal_master_0_debugaccess;             // SGDMA_m_read_translator:uav_debugaccess -> SGDMA_m_read_agent:av_debugaccess
	wire   [31:0] sgdma_m_read_translator_avalon_universal_master_0_address;                 // SGDMA_m_read_translator:uav_address -> SGDMA_m_read_agent:av_address
	wire          sgdma_m_read_translator_avalon_universal_master_0_read;                    // SGDMA_m_read_translator:uav_read -> SGDMA_m_read_agent:av_read
	wire    [3:0] sgdma_m_read_translator_avalon_universal_master_0_byteenable;              // SGDMA_m_read_translator:uav_byteenable -> SGDMA_m_read_agent:av_byteenable
	wire          sgdma_m_read_translator_avalon_universal_master_0_readdatavalid;           // SGDMA_m_read_agent:av_readdatavalid -> SGDMA_m_read_translator:uav_readdatavalid
	wire          sgdma_m_read_translator_avalon_universal_master_0_lock;                    // SGDMA_m_read_translator:uav_lock -> SGDMA_m_read_agent:av_lock
	wire          sgdma_m_read_translator_avalon_universal_master_0_write;                   // SGDMA_m_read_translator:uav_write -> SGDMA_m_read_agent:av_write
	wire   [31:0] sgdma_m_read_translator_avalon_universal_master_0_writedata;               // SGDMA_m_read_translator:uav_writedata -> SGDMA_m_read_agent:av_writedata
	wire    [2:0] sgdma_m_read_translator_avalon_universal_master_0_burstcount;              // SGDMA_m_read_translator:uav_burstcount -> SGDMA_m_read_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                     // rsp_mux_002:src_valid -> SGDMA_m_read_agent:rp_valid
	wire  [110:0] rsp_mux_002_src_data;                                                      // rsp_mux_002:src_data -> SGDMA_m_read_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                     // SGDMA_m_read_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [2:0] rsp_mux_002_src_channel;                                                   // rsp_mux_002:src_channel -> SGDMA_m_read_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                             // rsp_mux_002:src_startofpacket -> SGDMA_m_read_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                               // rsp_mux_002:src_endofpacket -> SGDMA_m_read_agent:rp_endofpacket
	wire   [63:0] pciexpress_txs_agent_m0_readdata;                                          // PCIExpress_txs_translator:uav_readdata -> PCIExpress_txs_agent:m0_readdata
	wire          pciexpress_txs_agent_m0_waitrequest;                                       // PCIExpress_txs_translator:uav_waitrequest -> PCIExpress_txs_agent:m0_waitrequest
	wire          pciexpress_txs_agent_m0_debugaccess;                                       // PCIExpress_txs_agent:m0_debugaccess -> PCIExpress_txs_translator:uav_debugaccess
	wire   [31:0] pciexpress_txs_agent_m0_address;                                           // PCIExpress_txs_agent:m0_address -> PCIExpress_txs_translator:uav_address
	wire    [7:0] pciexpress_txs_agent_m0_byteenable;                                        // PCIExpress_txs_agent:m0_byteenable -> PCIExpress_txs_translator:uav_byteenable
	wire          pciexpress_txs_agent_m0_read;                                              // PCIExpress_txs_agent:m0_read -> PCIExpress_txs_translator:uav_read
	wire          pciexpress_txs_agent_m0_readdatavalid;                                     // PCIExpress_txs_translator:uav_readdatavalid -> PCIExpress_txs_agent:m0_readdatavalid
	wire          pciexpress_txs_agent_m0_lock;                                              // PCIExpress_txs_agent:m0_lock -> PCIExpress_txs_translator:uav_lock
	wire   [63:0] pciexpress_txs_agent_m0_writedata;                                         // PCIExpress_txs_agent:m0_writedata -> PCIExpress_txs_translator:uav_writedata
	wire          pciexpress_txs_agent_m0_write;                                             // PCIExpress_txs_agent:m0_write -> PCIExpress_txs_translator:uav_write
	wire    [9:0] pciexpress_txs_agent_m0_burstcount;                                        // PCIExpress_txs_agent:m0_burstcount -> PCIExpress_txs_translator:uav_burstcount
	wire          pciexpress_txs_agent_rf_source_valid;                                      // PCIExpress_txs_agent:rf_source_valid -> PCIExpress_txs_agent_rsp_fifo:in_valid
	wire  [147:0] pciexpress_txs_agent_rf_source_data;                                       // PCIExpress_txs_agent:rf_source_data -> PCIExpress_txs_agent_rsp_fifo:in_data
	wire          pciexpress_txs_agent_rf_source_ready;                                      // PCIExpress_txs_agent_rsp_fifo:in_ready -> PCIExpress_txs_agent:rf_source_ready
	wire          pciexpress_txs_agent_rf_source_startofpacket;                              // PCIExpress_txs_agent:rf_source_startofpacket -> PCIExpress_txs_agent_rsp_fifo:in_startofpacket
	wire          pciexpress_txs_agent_rf_source_endofpacket;                                // PCIExpress_txs_agent:rf_source_endofpacket -> PCIExpress_txs_agent_rsp_fifo:in_endofpacket
	wire          pciexpress_txs_agent_rsp_fifo_out_valid;                                   // PCIExpress_txs_agent_rsp_fifo:out_valid -> PCIExpress_txs_agent:rf_sink_valid
	wire  [147:0] pciexpress_txs_agent_rsp_fifo_out_data;                                    // PCIExpress_txs_agent_rsp_fifo:out_data -> PCIExpress_txs_agent:rf_sink_data
	wire          pciexpress_txs_agent_rsp_fifo_out_ready;                                   // PCIExpress_txs_agent:rf_sink_ready -> PCIExpress_txs_agent_rsp_fifo:out_ready
	wire          pciexpress_txs_agent_rsp_fifo_out_startofpacket;                           // PCIExpress_txs_agent_rsp_fifo:out_startofpacket -> PCIExpress_txs_agent:rf_sink_startofpacket
	wire          pciexpress_txs_agent_rsp_fifo_out_endofpacket;                             // PCIExpress_txs_agent_rsp_fifo:out_endofpacket -> PCIExpress_txs_agent:rf_sink_endofpacket
	wire          sgdma_descriptor_read_agent_cp_valid;                                      // SGDMA_descriptor_read_agent:cp_valid -> router:sink_valid
	wire  [110:0] sgdma_descriptor_read_agent_cp_data;                                       // SGDMA_descriptor_read_agent:cp_data -> router:sink_data
	wire          sgdma_descriptor_read_agent_cp_ready;                                      // router:sink_ready -> SGDMA_descriptor_read_agent:cp_ready
	wire          sgdma_descriptor_read_agent_cp_startofpacket;                              // SGDMA_descriptor_read_agent:cp_startofpacket -> router:sink_startofpacket
	wire          sgdma_descriptor_read_agent_cp_endofpacket;                                // SGDMA_descriptor_read_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                          // router:src_valid -> cmd_demux:sink_valid
	wire  [110:0] router_src_data;                                                           // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                          // cmd_demux:sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                        // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                  // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                    // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          sgdma_descriptor_write_agent_cp_valid;                                     // SGDMA_descriptor_write_agent:cp_valid -> router_001:sink_valid
	wire  [110:0] sgdma_descriptor_write_agent_cp_data;                                      // SGDMA_descriptor_write_agent:cp_data -> router_001:sink_data
	wire          sgdma_descriptor_write_agent_cp_ready;                                     // router_001:sink_ready -> SGDMA_descriptor_write_agent:cp_ready
	wire          sgdma_descriptor_write_agent_cp_startofpacket;                             // SGDMA_descriptor_write_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          sgdma_descriptor_write_agent_cp_endofpacket;                               // SGDMA_descriptor_write_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                      // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [110:0] router_001_src_data;                                                       // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                      // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                    // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                              // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          sgdma_m_read_agent_cp_valid;                                               // SGDMA_m_read_agent:cp_valid -> router_002:sink_valid
	wire  [110:0] sgdma_m_read_agent_cp_data;                                                // SGDMA_m_read_agent:cp_data -> router_002:sink_data
	wire          sgdma_m_read_agent_cp_ready;                                               // router_002:sink_ready -> SGDMA_m_read_agent:cp_ready
	wire          sgdma_m_read_agent_cp_startofpacket;                                       // SGDMA_m_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          sgdma_m_read_agent_cp_endofpacket;                                         // SGDMA_m_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                      // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [110:0] router_002_src_data;                                                       // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                      // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                    // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                              // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          pciexpress_txs_agent_rp_valid;                                             // PCIExpress_txs_agent:rp_valid -> router_003:sink_valid
	wire  [146:0] pciexpress_txs_agent_rp_data;                                              // PCIExpress_txs_agent:rp_data -> router_003:sink_data
	wire          pciexpress_txs_agent_rp_ready;                                             // router_003:sink_ready -> PCIExpress_txs_agent:rp_ready
	wire          pciexpress_txs_agent_rp_startofpacket;                                     // PCIExpress_txs_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          pciexpress_txs_agent_rp_endofpacket;                                       // PCIExpress_txs_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [110:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [110:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                  // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                  // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [110:0] cmd_demux_002_src0_data;                                                   // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                  // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire    [2:0] cmd_demux_002_src0_channel;                                                // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                          // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                            // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [110:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                      // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [110:0] rsp_demux_src1_data;                                                       // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                      // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [2:0] rsp_demux_src1_channel;                                                    // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                              // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                      // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [110:0] rsp_demux_src2_data;                                                       // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                      // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire    [2:0] rsp_demux_src2_channel;                                                    // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                              // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> PCIExpress_txs_cmd_width_adapter:in_valid
	wire  [110:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> PCIExpress_txs_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                         // PCIExpress_txs_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> PCIExpress_txs_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> PCIExpress_txs_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> PCIExpress_txs_cmd_width_adapter:in_endofpacket
	wire          pciexpress_txs_cmd_width_adapter_src_valid;                                // PCIExpress_txs_cmd_width_adapter:out_valid -> PCIExpress_txs_agent:cp_valid
	wire  [146:0] pciexpress_txs_cmd_width_adapter_src_data;                                 // PCIExpress_txs_cmd_width_adapter:out_data -> PCIExpress_txs_agent:cp_data
	wire          pciexpress_txs_cmd_width_adapter_src_ready;                                // PCIExpress_txs_agent:cp_ready -> PCIExpress_txs_cmd_width_adapter:out_ready
	wire    [2:0] pciexpress_txs_cmd_width_adapter_src_channel;                              // PCIExpress_txs_cmd_width_adapter:out_channel -> PCIExpress_txs_agent:cp_channel
	wire          pciexpress_txs_cmd_width_adapter_src_startofpacket;                        // PCIExpress_txs_cmd_width_adapter:out_startofpacket -> PCIExpress_txs_agent:cp_startofpacket
	wire          pciexpress_txs_cmd_width_adapter_src_endofpacket;                          // PCIExpress_txs_cmd_width_adapter:out_endofpacket -> PCIExpress_txs_agent:cp_endofpacket
	wire          router_003_src_valid;                                                      // router_003:src_valid -> PCIExpress_txs_rsp_width_adapter:in_valid
	wire  [146:0] router_003_src_data;                                                       // router_003:src_data -> PCIExpress_txs_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                      // PCIExpress_txs_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                    // router_003:src_channel -> PCIExpress_txs_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                              // router_003:src_startofpacket -> PCIExpress_txs_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                // router_003:src_endofpacket -> PCIExpress_txs_rsp_width_adapter:in_endofpacket
	wire          pciexpress_txs_rsp_width_adapter_src_valid;                                // PCIExpress_txs_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [110:0] pciexpress_txs_rsp_width_adapter_src_data;                                 // PCIExpress_txs_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          pciexpress_txs_rsp_width_adapter_src_ready;                                // rsp_demux:sink_ready -> PCIExpress_txs_rsp_width_adapter:out_ready
	wire    [2:0] pciexpress_txs_rsp_width_adapter_src_channel;                              // PCIExpress_txs_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          pciexpress_txs_rsp_width_adapter_src_startofpacket;                        // PCIExpress_txs_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          pciexpress_txs_rsp_width_adapter_src_endofpacket;                          // PCIExpress_txs_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          pciexpress_txs_agent_rdata_fifo_src_valid;                                 // PCIExpress_txs_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [65:0] pciexpress_txs_agent_rdata_fifo_src_data;                                  // PCIExpress_txs_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          pciexpress_txs_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter:in_0_ready -> PCIExpress_txs_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                             // avalon_st_adapter:out_0_valid -> PCIExpress_txs_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_out_0_data;                                              // avalon_st_adapter:out_0_data -> PCIExpress_txs_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                             // PCIExpress_txs_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                             // avalon_st_adapter:out_0_error -> PCIExpress_txs_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_descriptor_read_translator (
		.clk                    (PCIExpress_pcie_core_clk_clk),                                             //                       clk.clk
		.reset                  (SGDMA_reset_reset_bridge_in_reset_reset),                                  //                     reset.reset
		.uav_address            (sgdma_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (SGDMA_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (SGDMA_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (SGDMA_descriptor_read_read),                                               //                          .read
		.av_readdata            (SGDMA_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (SGDMA_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_byteenable          (4'b1111),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_write               (1'b0),                                                                     //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_descriptor_write_translator (
		.clk                    (PCIExpress_pcie_core_clk_clk),                                              //                       clk.clk
		.reset                  (SGDMA_reset_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (sgdma_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (SGDMA_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (SGDMA_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (SGDMA_descriptor_write_write),                                              //                          .write
		.av_writedata           (SGDMA_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_read                (1'b0),                                                                      //               (terminated)
		.av_readdata            (),                                                                          //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_m_read_translator (
		.clk                    (PCIExpress_pcie_core_clk_clk),                                    //                       clk.clk
		.reset                  (SGDMA_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (sgdma_m_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_m_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_m_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_m_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_m_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_m_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_m_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_m_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_m_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_m_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_m_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (SGDMA_m_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (SGDMA_m_read_waitrequest),                                        //                          .waitrequest
		.av_read                (SGDMA_m_read_read),                                               //                          .read
		.av_readdata            (SGDMA_m_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (SGDMA_m_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                            //               (terminated)
		.av_byteenable          (4'b1111),                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                            //               (terminated)
		.av_write               (1'b0),                                                            //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                            //               (terminated)
		.av_lock                (1'b0),                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                            //               (terminated)
		.uav_clken              (),                                                                //               (terminated)
		.av_clken               (1'b1),                                                            //               (terminated)
		.uav_response           (2'b00),                                                           //               (terminated)
		.av_response            (),                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pciexpress_txs_translator (
		.clk                    (PCIExpress_pcie_core_clk_clk),                                //                      clk.clk
		.reset                  (PCIExpress_txs_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pciexpress_txs_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (pciexpress_txs_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (pciexpress_txs_agent_m0_read),                                //                         .read
		.uav_write              (pciexpress_txs_agent_m0_write),                               //                         .write
		.uav_waitrequest        (pciexpress_txs_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (pciexpress_txs_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (pciexpress_txs_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (pciexpress_txs_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (pciexpress_txs_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (pciexpress_txs_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (pciexpress_txs_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (PCIExpress_txs_address),                                      //      avalon_anti_slave_0.address
		.av_write               (PCIExpress_txs_write),                                        //                         .write
		.av_read                (PCIExpress_txs_read),                                         //                         .read
		.av_readdata            (PCIExpress_txs_readdata),                                     //                         .readdata
		.av_writedata           (PCIExpress_txs_writedata),                                    //                         .writedata
		.av_burstcount          (PCIExpress_txs_burstcount),                                   //                         .burstcount
		.av_byteenable          (PCIExpress_txs_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (PCIExpress_txs_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (PCIExpress_txs_waitrequest),                                  //                         .waitrequest
		.av_chipselect          (PCIExpress_txs_chipselect),                                   //                         .chipselect
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (110),
		.PKT_ORI_BURST_SIZE_L      (108),
		.PKT_RESPONSE_STATUS_H     (107),
		.PKT_RESPONSE_STATUS_L     (106),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (105),
		.PKT_CACHE_L               (102),
		.PKT_THREAD_ID_H           (98),
		.PKT_THREAD_ID_L           (98),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (101),
		.PKT_PROTECTION_L          (99),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (97),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (111),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_descriptor_read_agent (
		.clk                   (PCIExpress_pcie_core_clk_clk),                                             //       clk.clk
		.reset                 (SGDMA_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.av_address            (sgdma_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                        //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (110),
		.PKT_ORI_BURST_SIZE_L      (108),
		.PKT_RESPONSE_STATUS_H     (107),
		.PKT_RESPONSE_STATUS_L     (106),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (105),
		.PKT_CACHE_L               (102),
		.PKT_THREAD_ID_H           (98),
		.PKT_THREAD_ID_L           (98),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (101),
		.PKT_PROTECTION_L          (99),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (97),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (111),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_descriptor_write_agent (
		.clk                   (PCIExpress_pcie_core_clk_clk),                                              //       clk.clk
		.reset                 (SGDMA_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (sgdma_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (110),
		.PKT_ORI_BURST_SIZE_L      (108),
		.PKT_RESPONSE_STATUS_H     (107),
		.PKT_RESPONSE_STATUS_L     (106),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (105),
		.PKT_CACHE_L               (102),
		.PKT_THREAD_ID_H           (98),
		.PKT_THREAD_ID_L           (98),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (101),
		.PKT_PROTECTION_L          (99),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (97),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (111),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_m_read_agent (
		.clk                   (PCIExpress_pcie_core_clk_clk),                                    //       clk.clk
		.reset                 (SGDMA_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (sgdma_m_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_m_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_m_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_m_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_m_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_m_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_m_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_m_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_m_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_m_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_m_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_m_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_m_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_m_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_m_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_m_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                           //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                            //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                         //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                     //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                           //          .ready
		.av_response           (),                                                                // (terminated)
		.av_writeresponsevalid ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (146),
		.PKT_ORI_BURST_SIZE_L      (144),
		.PKT_RESPONSE_STATUS_H     (143),
		.PKT_RESPONSE_STATUS_L     (142),
		.PKT_BURST_SIZE_H          (123),
		.PKT_BURST_SIZE_L          (121),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (128),
		.PKT_PROTECTION_H          (137),
		.PKT_PROTECTION_L          (135),
		.PKT_BURSTWRAP_H           (120),
		.PKT_BURSTWRAP_L           (120),
		.PKT_BYTE_CNT_H            (119),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (131),
		.PKT_SRC_ID_L              (130),
		.PKT_DEST_ID_H             (133),
		.PKT_DEST_ID_L             (132),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (147),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pciexpress_txs_agent (
		.clk                     (PCIExpress_pcie_core_clk_clk),                                //             clk.clk
		.reset                   (PCIExpress_txs_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pciexpress_txs_agent_m0_address),                             //              m0.address
		.m0_burstcount           (pciexpress_txs_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (pciexpress_txs_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (pciexpress_txs_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (pciexpress_txs_agent_m0_lock),                                //                .lock
		.m0_readdata             (pciexpress_txs_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (pciexpress_txs_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (pciexpress_txs_agent_m0_read),                                //                .read
		.m0_waitrequest          (pciexpress_txs_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (pciexpress_txs_agent_m0_writedata),                           //                .writedata
		.m0_write                (pciexpress_txs_agent_m0_write),                               //                .write
		.rp_endofpacket          (pciexpress_txs_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (pciexpress_txs_agent_rp_ready),                               //                .ready
		.rp_valid                (pciexpress_txs_agent_rp_valid),                               //                .valid
		.rp_data                 (pciexpress_txs_agent_rp_data),                                //                .data
		.rp_startofpacket        (pciexpress_txs_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (pciexpress_txs_cmd_width_adapter_src_ready),                  //              cp.ready
		.cp_valid                (pciexpress_txs_cmd_width_adapter_src_valid),                  //                .valid
		.cp_data                 (pciexpress_txs_cmd_width_adapter_src_data),                   //                .data
		.cp_startofpacket        (pciexpress_txs_cmd_width_adapter_src_startofpacket),          //                .startofpacket
		.cp_endofpacket          (pciexpress_txs_cmd_width_adapter_src_endofpacket),            //                .endofpacket
		.cp_channel              (pciexpress_txs_cmd_width_adapter_src_channel),                //                .channel
		.rf_sink_ready           (pciexpress_txs_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (pciexpress_txs_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (pciexpress_txs_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (pciexpress_txs_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (pciexpress_txs_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (pciexpress_txs_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (pciexpress_txs_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (pciexpress_txs_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (pciexpress_txs_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (pciexpress_txs_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (pciexpress_txs_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pciexpress_txs_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (pciexpress_txs_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (148),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pciexpress_txs_agent_rsp_fifo (
		.clk               (PCIExpress_pcie_core_clk_clk),                                //       clk.clk
		.reset             (PCIExpress_txs_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pciexpress_txs_agent_rf_source_data),                         //        in.data
		.in_valid          (pciexpress_txs_agent_rf_source_valid),                        //          .valid
		.in_ready          (pciexpress_txs_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (pciexpress_txs_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (pciexpress_txs_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (pciexpress_txs_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (pciexpress_txs_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (pciexpress_txs_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (pciexpress_txs_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (pciexpress_txs_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	Architectire_mm_interconnect_2_router router (
		.sink_ready         (sgdma_descriptor_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_descriptor_read_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_descriptor_read_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_descriptor_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_descriptor_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (PCIExpress_pcie_core_clk_clk),                 //       clk.clk
		.reset              (SGDMA_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_src_ready),                             //       src.ready
		.src_valid          (router_src_valid),                             //          .valid
		.src_data           (router_src_data),                              //          .data
		.src_channel        (router_src_channel),                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //          .endofpacket
	);

	Architectire_mm_interconnect_2_router router_001 (
		.sink_ready         (sgdma_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (PCIExpress_pcie_core_clk_clk),                  //       clk.clk
		.reset              (SGDMA_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	Architectire_mm_interconnect_2_router router_002 (
		.sink_ready         (sgdma_m_read_agent_cp_ready),             //      sink.ready
		.sink_valid         (sgdma_m_read_agent_cp_valid),             //          .valid
		.sink_data          (sgdma_m_read_agent_cp_data),              //          .data
		.sink_startofpacket (sgdma_m_read_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sgdma_m_read_agent_cp_endofpacket),       //          .endofpacket
		.clk                (PCIExpress_pcie_core_clk_clk),            //       clk.clk
		.reset              (SGDMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                    //       src.ready
		.src_valid          (router_002_src_valid),                    //          .valid
		.src_data           (router_002_src_data),                     //          .data
		.src_channel        (router_002_src_channel),                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)               //          .endofpacket
	);

	Architectire_mm_interconnect_2_router_003 router_003 (
		.sink_ready         (pciexpress_txs_agent_rp_ready),                               //      sink.ready
		.sink_valid         (pciexpress_txs_agent_rp_valid),                               //          .valid
		.sink_data          (pciexpress_txs_agent_rp_data),                                //          .data
		.sink_startofpacket (pciexpress_txs_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (pciexpress_txs_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (PCIExpress_pcie_core_clk_clk),                                //       clk.clk
		.reset              (PCIExpress_txs_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                        //       src.ready
		.src_valid          (router_003_src_valid),                                        //          .valid
		.src_data           (router_003_src_data),                                         //          .data
		.src_channel        (router_003_src_channel),                                      //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                   //          .endofpacket
	);

	Architectire_mm_interconnect_0_cmd_demux_001 cmd_demux (
		.clk                (PCIExpress_pcie_core_clk_clk),            //       clk.clk
		.reset              (SGDMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                        //      sink.ready
		.sink_channel       (router_src_channel),                      //          .channel
		.sink_data          (router_src_data),                         //          .data
		.sink_startofpacket (router_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_src_valid),                        //          .valid
		.src0_ready         (cmd_demux_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_src0_data),                     //          .data
		.src0_channel       (cmd_demux_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)               //          .endofpacket
	);

	Architectire_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (PCIExpress_pcie_core_clk_clk),            //       clk.clk
		.reset              (SGDMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                    //      sink.ready
		.sink_channel       (router_001_src_channel),                  //          .channel
		.sink_data          (router_001_src_data),                     //          .data
		.sink_startofpacket (router_001_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_001_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                //          .valid
		.src0_data          (cmd_demux_001_src0_data),                 //          .data
		.src0_channel       (cmd_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)           //          .endofpacket
	);

	Architectire_mm_interconnect_0_cmd_demux_001 cmd_demux_002 (
		.clk                (PCIExpress_pcie_core_clk_clk),            //       clk.clk
		.reset              (SGDMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                //          .valid
		.src0_data          (cmd_demux_002_src0_data),                 //          .data
		.src0_channel       (cmd_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)           //          .endofpacket
	);

	Architectire_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (PCIExpress_pcie_core_clk_clk),                                //       clk.clk
		.reset               (PCIExpress_txs_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                                           //          .valid
		.src_data            (cmd_mux_src_data),                                            //          .data
		.src_channel         (cmd_mux_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                    //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                  //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                     //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                              //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                    //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                    //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                  //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                     //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                            //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                               //          .endofpacket
	);

	Architectire_mm_interconnect_0_cmd_demux rsp_demux (
		.clk                (PCIExpress_pcie_core_clk_clk),                                //       clk.clk
		.reset              (PCIExpress_txs_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (pciexpress_txs_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (pciexpress_txs_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (pciexpress_txs_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (pciexpress_txs_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (pciexpress_txs_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (pciexpress_txs_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                                   //          .endofpacket
	);

	Architectire_mm_interconnect_0_rsp_mux_001 rsp_mux (
		.clk                 (PCIExpress_pcie_core_clk_clk),            //       clk.clk
		.reset               (SGDMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                       //          .valid
		.src_data            (rsp_mux_src_data),                        //          .data
		.src_channel         (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                  //          .channel
		.sink0_data          (rsp_demux_src0_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)               //          .endofpacket
	);

	Architectire_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (PCIExpress_pcie_core_clk_clk),            //       clk.clk
		.reset               (SGDMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                   //          .valid
		.src_data            (rsp_mux_001_src_data),                    //          .data
		.src_channel         (rsp_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                  //          .channel
		.sink0_data          (rsp_demux_src1_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)               //          .endofpacket
	);

	Architectire_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                 (PCIExpress_pcie_core_clk_clk),            //       clk.clk
		.reset               (SGDMA_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                   //          .valid
		.src_data            (rsp_mux_002_src_data),                    //          .data
		.src_channel         (rsp_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                  //          .channel
		.sink0_data          (rsp_demux_src2_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)               //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (107),
		.IN_PKT_RESPONSE_STATUS_L      (106),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (108),
		.IN_PKT_ORI_BURST_SIZE_H       (110),
		.IN_ST_DATA_W                  (111),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (119),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (123),
		.OUT_PKT_BURST_SIZE_L          (121),
		.OUT_PKT_RESPONSE_STATUS_H     (143),
		.OUT_PKT_RESPONSE_STATUS_L     (142),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (125),
		.OUT_PKT_BURST_TYPE_L          (124),
		.OUT_PKT_ORI_BURST_SIZE_L      (144),
		.OUT_PKT_ORI_BURST_SIZE_H      (146),
		.OUT_ST_DATA_W                 (147),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pciexpress_txs_cmd_width_adapter (
		.clk                  (PCIExpress_pcie_core_clk_clk),                                //       clk.clk
		.reset                (PCIExpress_txs_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                           //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                         //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                           //          .ready
		.in_data              (cmd_mux_src_data),                                            //          .data
		.out_endofpacket      (pciexpress_txs_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (pciexpress_txs_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (pciexpress_txs_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (pciexpress_txs_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (pciexpress_txs_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (pciexpress_txs_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (119),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (120),
		.IN_PKT_BURSTWRAP_L            (120),
		.IN_PKT_BURST_SIZE_H           (123),
		.IN_PKT_BURST_SIZE_L           (121),
		.IN_PKT_RESPONSE_STATUS_H      (143),
		.IN_PKT_RESPONSE_STATUS_L      (142),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (125),
		.IN_PKT_BURST_TYPE_L           (124),
		.IN_PKT_ORI_BURST_SIZE_L       (144),
		.IN_PKT_ORI_BURST_SIZE_H       (146),
		.IN_ST_DATA_W                  (147),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (107),
		.OUT_PKT_RESPONSE_STATUS_L     (106),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (108),
		.OUT_PKT_ORI_BURST_SIZE_H      (110),
		.OUT_ST_DATA_W                 (111),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pciexpress_txs_rsp_width_adapter (
		.clk                  (PCIExpress_pcie_core_clk_clk),                                //       clk.clk
		.reset                (PCIExpress_txs_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_003_src_valid),                                        //      sink.valid
		.in_channel           (router_003_src_channel),                                      //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                  //          .endofpacket
		.in_ready             (router_003_src_ready),                                        //          .ready
		.in_data              (router_003_src_data),                                         //          .data
		.out_endofpacket      (pciexpress_txs_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (pciexpress_txs_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (pciexpress_txs_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (pciexpress_txs_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (pciexpress_txs_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (pciexpress_txs_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated)
	);

	Architectire_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (PCIExpress_pcie_core_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (PCIExpress_txs_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pciexpress_txs_agent_rdata_fifo_src_data),                    //     in_0.data
		.in_0_valid     (pciexpress_txs_agent_rdata_fifo_src_valid),                   //         .valid
		.in_0_ready     (pciexpress_txs_agent_rdata_fifo_src_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                //         .error
	);

endmodule
